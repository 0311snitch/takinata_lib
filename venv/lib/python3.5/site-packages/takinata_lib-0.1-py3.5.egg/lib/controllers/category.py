import lib.logger as logger
from lib.exception import *
from lib.storage.category import CategoryStorage
from lib.storage.project import ProjectStorage
from lib.models.models import Category
import os
from lib.storage.user import *


class CategoryController:
    log_tag = "CategoryController"
    log = logger.get_logger(log_tag)
    @staticmethod
    def create_category(username, password, project_id, name, description):
        """
        Creates a category for the specified project
        :param username: who want to create a new category
        :param password: user password
        :param project_name: name of the project where user want to create a category
        :param name: name of the category
        :param description: description of the category
        :return:
        """
        user = UserStorage.get_user_by_name(username)
        if user.password == password:
            project = ProjectStorage.get_project_by_id(project_id)
            if ProjectStorage.is_admin(user, project) == 0:
                category = Category(name=name, desc=description, project_id=project.id)
                CategoryController.log.info("Category was successfully created")
                CategoryStorage.add_category_to_db(category)
        else:
            log.error("Incorrect password for %s", username)
            raise WrongPassword

    @classmethod
    def delete_category(cls, username, password, project_name, name):
        """
        Removes a category with the specified name from the specified project
        :param username: name of user, whitch want to delete a column
        :param password: user password
        :param project_name: name of project where category is
        :param name: name of caregory to delete
        :return:
        """
        user = UserStorage.get_user_by_name(username)
        if user.password == password:
            category = CategoryStorage.get_column(project_name, name)
            project = ProjectStorage.get_project(project_name)
            ProjectStorage.is_admin(user, project)
            CategoryStorage.delete_category_from_db(column)
            CategoryController.log.info("Category was successfully deleted")
        else:
            CategoryController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def show_all(cls, username, password, project_id):
        """
        Displays all categories of the project
        :param username: user, which want to watch categories list in project
        :param password: user password
        :param project_id: the project id whose categories you want to show
        :return:
        """
        user = UserStorage.get_user_by_name(username)
        project = ProjectStorage.get_project_by_id(project_id)
        if user.password == password:
            ProjectStorage.check_permission(user, project)

            cats = CategoryStorage.get_all_categories(project_id)
            return cats
        else:
            CategoryController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def get_all_user_categories(cls, username, password):
        """
        Return all categories, where user consist as executor or creator
        :param username:
        :param passwowd:
        :return:
        """
        user = UserStorage.get_user_by_name(username)
        projects = ProjectStorage.show_all_for_user(username, password)
        cats = []
        if user.password == password:
            for project in projects:
                categories = CategoryController.show_all(username, password, project.id)
                cats = cats + categories
                CategoryController.log.info("Categories was successfully shown")
            return cats
        else:
            CategoryController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def edit_name_by_id(cls, username, password, project_id, category_id, new_name):
        """
        The change of name of the category
        :param username: username of project user
        :param password: password of user
        :param project_name: project name of project where category is
        :param category_id: id of category
        :param new_name: new name of category
        :return:
        """
        category = CategoryStorage.get_category_by_id(category_id)
        person = UserStorage.get_user_by_name(username)
        if person.password == password:
            project = ProjectStorage.get_project_by_id(project_id)
            ProjectStorage.is_admin(person, project)
            categories = CategoryController.show_all(username, password, project_id)
            have = False
            for cat in categories:
                if cat.name == new_name:
                    have = True
            if not have:
                category.name = new_name
                CategoryStorage.save(category)
                CategoryController.log.info("Category was successfully saved")
            else:
                CategoryController.log.error("Category with this name is already exist")
                raise ColumnWithThisNameAlreadyExist
        else:
            CategoryController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def edit_desc_by_id(cls, username, password, project_id, category_id, new_desc):
        """
        Change the description of the project
        :param username: username of column creator
        :param password: password of creator
        :param project_id: project id of project where category is
        :param category_id: category id
        :param new_desc: new description of category
        :return:
        """
        category = CategoryStorage.get_category_by_id(category_id)
        person = UserStorage.get_user_by_name(username)
        if person.password == password:
            project = ProjectStorage.get_project_by_id(project_id)
            ProjectStorage.is_admin(person, project)
            category.desc = new_desc
            CategoryStorage.save(category)
            CategoryController.log.info("Category was successfully saved")
        else:
            CategoryController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword
