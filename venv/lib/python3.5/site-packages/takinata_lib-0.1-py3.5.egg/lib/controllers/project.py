import os
import logging
import lib.logger as logger
from lib.exception import *
from lib.models.models import Project
from lib.storage.project import ProjectStorage
from lib.controllers.user import UserController
from lib.controllers.category import CategoryController


class ProjectController:
    """
    The data handler for project. Allows to create/delete, edit name/description of project, add/remove users to/from
    project, return projects tasks of project users.

    """

    log_tag = "ProjectController"
    log = logger.get_logger(log_tag)

    @classmethod
    def create(cls, username, password, name, description):
        """
        Create a project with a specified name and description
        :param username: user, who want to create a new project
        :param password: user password
        :param name: name of new project
        :param description: description of new project
        :return:
        """
        user = UserController.get_user_by_name(username)
        if user == None:
            raise NoUser
        if user.password == password:
            projects = ProjectStorage.show_all()
            for project in projects:
                if project.name == name:
                    raise ProjectWithThisNameAlreadyExist
            project = Project(name=name, description=description, user_id=user.id)
            project.users.append(user)
            ProjectStorage.add_project_to_db(project, user)
            ProjectController.log.info("Project {} was successfully created by {}.".format(name, username))
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def delete(cls, username, password, name):
        """
        Deletes the project with the specified name
        :param username: user, creator of project
        :param password: user password
        :param name: name of project to delete
        :return:
        """
        user = UserController.get_user_by_name(username)
        if user.password == password:
            project = ProjectStorage.get_project_by_name(user, name)
            ProjectStorage.check_permission(user, project)
            guys = ProjectStorage.get_all_persons_in_project_by_id(project)
            for i in guys:
                ProjectController.su_delete_person_from_project(username, password, i, project.id)
            ProjectStorage.delete_with_object(project)
            ProjectController.log.info("Project {} was successfully deleted by {}".format(name, username))
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def delete_by_id(cls, username, password, id):
        """
        Deletes the project with the specified id
        :param username: user, creator of project
        :param password: user password
        :param id: project id of project, which will be deleted
        :return:
        """
        user = UserController.get_user_by_name(username)
        if user.password == password:
            if ProjectController.is_admin(user.username, id):
                project = ProjectStorage.get_project_by_id(id)
                guys = ProjectStorage.get_all_persons_in_project_by_id(project.id)
                categories = CategoryController.show_all(username, password, project)
                for category in categories:
                    CategoryStorage.delete_category_from_db(category)
                guys = guys[::-1]
                for i in guys:
                    ProjectController.su_delete_person_from_project(username, password, i, project)
                ProjectStorage.delete_with_object(project)
                ProjectController.log.info("Project {} was successfully deleted by {}".format(project.name, username))
            else:
                pass
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def add_person_to_project(cls, username, password, project, person):
        """
        Adds an artist to the project
        :param username: name of project creator
        :param password: creator password
        :param person: the name of the user you want to add to the project
        :param project: instance of project
        :return:
        """
        admin = UserController.get_user_by_name(username)
        if person == None:
            raise NoUser
        if admin.password == password:
            if ProjectController.is_admin(admin.username, project):
                userlist = ProjectStorage.get_all_persons_in_project_by_id(project)
                have = False
                for user in userlist:
                    if user.id == person.id:
                        have = True
                if have == False:
                    ProjectStorage.add_person_to_project(person, project)
                    ProjectController.log.info("User was successfully added to project")
                else:
                    ProjectController.log.error("User {} is already exist in this project".format(username))
                    raise UserAlreadyExistInProject
            else:
                ProjectController.log.error("You are not the Creator of the project")
                raise UAreNotAdmin
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def delete_person_from_project(cls, username, password, project, person):
        """
        The removal of the contractor from the project
        :param username: username of creator
        :param password: creator password
        :param person: person to delete
        :param project: instance of project
        :return:
        """
        admin = UserController.get_user_by_name(username)
        if admin.password == password:
            if ProjectController.is_admin(admin.username, project.id):
                guys = ProjectStorage.get_all_persons_in_project_by_id(project.id)
                have = False
                if guys[0].id == person.id:
                    ProjectController.log.error("{} was tried to delete a creator of the project".format(username))
                    raise CannotDeleteCreator
                for i in range(len(guys)):
                    if guys[i].id == person.id:
                        have = True
                if not have:
                    ProjectController.log.error("User {} is not exist".format(person.username))
                    raise UserIsNotExistInProject
                else:
                    ProjectStorage.delete_person_from_project(person, project)
                    ProjectController.log.info(
                        "User {} was successfully deleted from the project".format(person.username))
            else:
                ProjectController.log.error("{} are not the Creator of the project".format(username))
                raise UAreNotAdmin
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def su_delete_person_from_project(cls, username, password, person, project):
        """
        Delete all the workers from the project, you can also delete the project Creator
        :param username: name of creator
        :param password: creator password
        :param person: person to delete
        :param project_id: project id
        :return:
        """
        admin = UserController.get_user_by_name(username)
        person = UserController.get_user_by_id(person.id)
        if admin.password == password:
            ProjectController.is_admin(admin.username, project.id)
            guys = ProjectStorage.get_all_persons_in_project_by_id(project.id)
            have = False
            for i in range(len(guys)):
                if guys[i].id == person.id:
                    have = True
            if not have:
                ProjectController.log.error("User with id {} is not exist".format(person.id))
                raise UserIsNotExistInProject
            else:
                ProjectStorage.delete_person_from_project(person, project)
                ProjectController.log.info("User {} was sucessfully deleted from the project".format(person.username))
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def edit_name_by_id(cls, username, password, project_id, new_name):
        """
        Editing the project name
        :param username: name of project creator
        :param password: creator password
        :param project_name: name of the project to be changed
        :param new_name: new name of project
        :return:
        """
        person = UserController.get_user_by_name(username)
        project = ProjectController.get_project_by_id(username, password, project_id)
        projects = ProjectController.show_all(username, password)
        if person.password == password:
            ProjectController.is_admin(person.username, project.id)
            for pr in projects:
                if pr.name == new_name:
                    raise ProjectWithThisNameAlreadyExist
            project.name = new_name
            ProjectStorage.save(project)
            ProjectController.log.info("Name of the project {} was successfully edited".format(project.name))
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def edit_description_by_id(cls, username, password, project_id, new_desc):
        """
        Editing the project description
        :param username: name of project creator
        :param password: creator password
        :param project_name: name of the project to be changed
        :param new_desc: new description of project
        :return:
        """
        person = UserController.get_user_by_name(username)
        project = ProjectController.get_project_by_id(username, password, project_id)
        if person.password == password:
            ProjectController.is_admin(person.username, project.id)
            project.description = new_desc
            ProjectStorage.save(project)
            ProjectController.log.info("Description of the project {} was successfully edited".format(project.name))
        else:
            ProjectController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def get_project_tasks(cls, username, password, project):
        categories = CategoryController.show_all(username, password, project)
        task_list = []
        for category in categories:
            tasks = TaskStorage.get_all_tasks(category.id)
            task_list = task_list + tasks
        available_tasks = []
        canceled_tasks = []
        for task in task_list:
            if task.is_archive == 0:
                available_tasks.append(task)
            else:
                canceled_tasks.append(task)
        task_list = available_tasks + canceled_tasks
        return task_list

    @classmethod
    def get_project_user_info(cls, project_id):
        all_users = UserController.get_all_users()
        guys = ProjectStorage.get_all_persons_in_project_by_id(project_id)
        all_guys = []
        guys_names = []
        for i in guys:
            guys_names.append(i.username)
        for i in all_users:
            if i.username not in guys_names:
                all_guys.append(i)
        creator = guys[0]
        guys = guys[1:]
        return creator, guys, all_guys

    @classmethod
    def show_all(cls, username, password):
        """
        Displays a list of all projects with the participants of these projects
        :param username:
        :param password:
        :return:
        """
        user = UserController.get_user_by_name(username)
        new_list = []
        if user.password == password:
            project_list = ProjectStorage.show_all()
            for project in project_list:
                have = False
                guys = ProjectStorage.get_all_persons_in_project_by_id(project.id)
                for guy in guys:
                    if user.id == guy.id:
                        have = True
                if have:
                    new_list.append(project)
        else:
            raise WrongPassword
        return new_list

    @classmethod
    def is_admin(cls, username, project_id):
        """
        Checks whether the specified user is the creator of the project
        :param person: the supposed creator
        :param project: project to check
        :return:
        """
        user = UserController.get_user_by_name(username)
        project = ProjectController.get_project_by_id(user.username, user.password, project_id)
        guys = ProjectStorage.get_all_persons_in_project_by_id(project.id)
        if guys[0].id == user.id:
            return True
        else:
            return False

    @classmethod
    def check_permission(cls, username, project_id):
        """
        Checks whether the specified user is participating in the project
        :param person: the supposed worker
        :param project: project to check
        :return:
        """
        user = UserController.get_user_by_name(username)
        project = ProjectController.get_project_by_id(username, user.password, project_id)
        guys = ProjectStorage.get_all_persons_in_project_by_id(project.id)
        for i in guys:
            if i.id == person.id:
                return True
        raise NoPermission

    @classmethod
    def get_project_by_id(cls, username, password, id):
        project = ProjectStorage.get_project_by_id(id)
        if project == None:
            raise NoProjectWithThisId
        return project

    @classmethod
    def get_all_user_categories(cls, username, password):
        """
        Return all categories, where user consist as executor or creator
        :param username: user, the category for which you want to get
        :param passwowd: user password
        :return: List 'cats' thhat contain all categories of all projects in where user exist or 'None' if there is
        no categories
        """
        user = UserController.get_user_by_name(username)
        projects = ProjectController.show_all(username, password)
        cats = []
        if user.password == password:
            for project in projects:
                categories = CategoryController.show_all(username, password, project)
                cats = cats + categories
                CategoryController.log.info("All categories for {} was returned".format(username))
            return cats
        else:
            CategoryController.log.error("Incorrect password for {}".format(username))
            raise WrongPassword

    @classmethod
    def show(cls, username, password, project_id):
        project = ProjectController.get_project_by_id(username, password, project_id)
        categories = CategoryController.get_all_categories(username, password, project)
        task_list = ProjectController.get_project_tasks(username, password, project)
        creator, guys, all_guys = ProjectController.get_project_user_info(project_id)
        return {'project': project, 'categories': categories, 'task_list': task_list, 'creator': creator, 'guys': guys,
                'all_guys': all_guys}
