import sqlite3
import lib.conf as conf
from lib.exception import *
from lib.models.models import Task, Project, Column
from lib.storage.category import CategoryStorage
from lib.storage.project import ProjectStorage
from sqlalchemy import create_engine, update
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine(conf.get_path_to_db())
Session = sessionmaker(bind=engine)
session = Session()

class TaskStorage:

    @classmethod
    def add_task_to_db(cls, task):
        session.add(task)
        session.commit()
        session.close()

    @classmethod
    def delete_task_from_db(cls, task):
        session.delete(task)
        session.commit()
        session.close()

    @classmethod
    def get_all_tasks(cls, project_id, category_id):
        taskz = []
        project = ProjectStorage.get_project_by_id(project_id)
        column = CategoryStorage.get_category_by_id(category_id)
        tasks = session.query(Task).filter(Task.category_id == category_id).all()
        session.close()
        if type(tasks) == list:
            return tasks
        else:
            taskz.append(tasks)
            return taskz

    @classmethod
    def get_all_user_task(cls, user):
        tasks = session.query(Task).filter(Task.user_id == user.id).all()
        session.close()
        return tasks

    @classmethod
    def get_task_by_id(cls, id):
        """
        Get an instance of a class with the specified name
        :param project_name: the name of the project that contains the column
        :param name: the name of the column
        :return:
        """
        task = session.query(Task).filter(Task.id == id).first()
        session.close()
        return task

    @classmethod
    def get_all_subtasks(cls, task):
        task_list = session.query(Task).filter(Task.parent_task_id == task.id).all()
        session.close()
        return task_list

    @classmethod
    def cancel_task(cls, task):
        task_save = session.query(Task).filter(Task.id == task.id).first()
        task_save.is_archive = 1
        session.commit()
        session.close()

    @classmethod
    def refresh_task_date(cls, task):
        task_save = session.query(Task).filter(Task.id == task.id).first()
        task_save.start_date = task.start_date
        task_save.end_date = task.end_date
        session.commit()
        session.close()

    @classmethod
    def save_as_parent(cls, task):
        task_save = session.query(Task).filter(Task.id == task.id).first()
        task_save.is_parent = task.is_parent
        session.commit()
        session.close()

    @classmethod
    def save_subtask(cls, task):
        task_save = session.query(Task).filter(Task.id == task.id).first()
        task_save.is_subtask = 1
        task_save.parent_task_id = task.parent_task_id
        session.commit()
        session.close()

    @classmethod
    def save_assosiate(cls, task):
        task_save = session.query(Task).filter(Task.id == task.id).first()
        task_save.assosiated_task_id = task.assosiated_task_id
        session.commit()
        session.close()

    @classmethod
    def get_parent_task(cls, task):
        parent_task = session.query(Task).filter(Task.id == task.parent_task_id).first()
        session.close()
        return parent_task