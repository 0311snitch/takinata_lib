import sqlite3

from lib import conf
from lib.exception import *
from lib.models.project import *
from lib.models.user import *
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
engine = create_engine(conf.get_path_to_db())
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

Session = sessionmaker(bind=engine)
session = Session()

class UserStorage:
    @classmethod
    def add_user_to_db(cls, user):
        """
        Add the transferred user to the database
        :param user: user to add
        :return:
        """
        session.add(user)
        session.commit()
        session.close()
        return

    @classmethod
    def get_all_users(cls):
        """
        Get a list of names of all existing users
        :return: list of user names
        """
        users = session.query(User).all()
        session.close()
        return users

    @classmethod
    def get_user_by_name(cls, name):
        """
        Get the user by the specified name
        :param name: user name
        :return:
        """
        user = session.query(User).filter(User.username==name).first()
        session.close()
        return user

    @classmethod
    def get_user_by_id(cls, id):
        """
        Get the user by the specified id
        :param id: user id
        :return:
        """
        user = session.query(User).filter(User.id == id).first()
        session.close()
        return user